import os

from aiogram import Router
from aiogram.types import Message, Chat
from aiogram.filters import Command, CommandObject
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

admin_ids_str = os.getenv("ADMIN_IDS", "")
ADMIN_IDS = [int(x.strip()) for x in admin_ids_str.split(",")] if admin_ids_str else []

admin_router = Router()
help_router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS


@admin_router.message(Command("admin_help"))
async def admin_help(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    help_text = """
ü§ñ <b>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/get_channel_id - –ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞
/get_chat_id - –ü–æ–ª—É—á–∏—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
/list_admins - –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –±–æ—Ç–∞
"""
    await message.answer(help_text, parse_mode="HTML")


@admin_router.message(Command("get_channel_id"))
async def get_channel_id(message: Message, command: CommandObject):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID –∫–∞–Ω–∞–ª–∞ –ø–æ username"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    if not command.args:
        await message.answer(
            "‚ùó –£–∫–∞–∂–∏—Ç–µ username –∫–∞–Ω–∞–ª–∞: /get_channel_id @channel_name"
        )
        return

    channel_username = command.args.strip()

    if not channel_username.startswith("@"):
        channel_username = "@" + channel_username

    try:
        chat: Chat = await message.bot.get_chat(channel_username)
        response = f"""
üìç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–∞–ª–µ:</b>
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {chat.title}
üîó Username: {chat.username}
üÜî ID: <code>{chat.id}</code>
üìä –¢–∏–ø: {chat.type}
"""
        await message.answer(response, parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ: {str(e)}")


@admin_router.message(Command("get_chat_id"))
async def get_chat_id(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    chat_info = f"""
üìç <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ:</b>
üÜî ID —á–∞—Ç–∞: <code>{message.chat.id}</code>
üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {message.chat.title or "–õ–∏—á–Ω—ã–π —á–∞—Ç"}
üîó Username: {message.chat.username or "–ù–µ—Ç"}
üìä –¢–∏–ø: {message.chat.type}
üë§ –í–∞—à ID: <code>{message.from_user.id}</code>
"""

    await message.answer(chat_info, parse_mode="HTML")


@admin_router.message(Command("list_admins"))
async def list_admins(message: Message):
    """–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    if not is_admin(message.from_user.id):
        return

    admins_list = "\n".join([f"üë§ <code>{admin_id}</code>" for admin_id in ADMIN_IDS])
    response = f"""
üë®‚Äçüíº <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –±–æ—Ç–∞:</b>

{admins_list}
"""
    await message.answer(response, parse_mode="HTML")


@admin_router.message(Command("get_user_info"))
async def get_user_info(message: Message, command: CommandObject):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ ID"""
    if not is_admin(message.from_user.id):
        return

    if not command.args:
        await message.answer("‚ùó –£–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: /get_user_info 123456789")
        return

    try:
        user_id = int(command.args.strip())
        user = await message.bot.get_chat(user_id)

        response = f"""
üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</b>
üÜî ID: <code>{user.id}</code>
üìù –ò–º—è: {user.first_name}
üë• –§–∞–º–∏–ª–∏—è: {user.last_name or "–ù–µ—Ç"}
üîó Username: @{user.username or "–ù–µ—Ç"}
ü§ñ –¢–∏–ø: {user.type}
"""
        await message.answer(response, parse_mode="HTML")

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@admin_router.message(Command("update_commands"))
async def update_commands(message: Message):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
    if not is_admin(message.from_user.id):
        return

    try:
        from aiogram.types import BotCommand

        commands = [
            BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
            BotCommand(command="help", description="–ü–æ–º–æ—â—å"),
            # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
            BotCommand(command="admin_help", description="–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã"),
            BotCommand(command="get_channel_id", description="–ü–æ–ª—É—á–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞"),
            BotCommand(command="get_chat_id", description="–ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞"),
            BotCommand(command="list_admins", description="–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"),
            BotCommand(command="get_user_info", description="–ò–Ω—Ñ–æ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"),
        ]

        await message.bot.set_my_commands(commands)
        await message.answer("‚úÖ –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥: {str(e)}")


@help_router.message(Command("help"))
async def help_command_with_buttons(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    help_text = """
ü§ñ <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É</b>

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å

üí° <b>–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
‚Ä¢ –†–∞–±–æ—Ç–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
‚Ä¢ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π

‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>
<b>Q:</b> –ö–∞–∫ –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞?
<b>A:</b> –ù–∞–∂–º–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start

<b>Q:</b> –ì–¥–µ –Ω–∞–π—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é?
<b>A:</b> –ü–æ—Å–µ—Ç–∏—Ç–µ –Ω–∞—à —Å–∞–π—Ç –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
"""

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="üè† –ù–∞ –≥–ª–∞–≤–Ω—É—é", callback_data="main_menu"),
                InlineKeyboardButton(text="üë§ –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"),
            ],
            [InlineKeyboardButton(text="üåê –ù–∞—à —Å–∞–π—Ç", url="https://example.com")],
        ]
    )

    await message.answer(help_text, parse_mode="HTML", reply_markup=keyboard)
