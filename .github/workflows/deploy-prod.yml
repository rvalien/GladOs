name: Deploy to Production
on:
  push:
    branches:
      - release/prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: cd-prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version from commit message
        id: get_version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ \[RELEASE-v([0-9]+\.[0-9]+(\.[0-9]+)?)\] ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Найдена версия в commit: $VERSION"
          else
            VERSION="latest"
            echo "Используется latest"
          fi
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Create .env file locally
        run: |
          LOWERCASE_REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')

          cat > .env << EOF
          RELEASE_VERSION=${{ env.version }}
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEATHER_TOKEN=${{ secrets.WEATHER_TOKEN }}
          ADMIN_IDS=${{ secrets.ADMIN_IDS }}
          IMAGE=$LOWERCASE_REPO_NAME
          EOF

      - name: Upload .env and docker-compose.yml to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}

          source: ".env,docker-compose.yml"
          target: "${{ secrets.PROD_APP_PATH }}/"


      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Создаем директорию если не существует
            mkdir -p ${{ secrets.PROD_APP_PATH }}
            cd ${{ secrets.PROD_APP_PATH }}

            # Проверяем наличие docker-compose.yml
            if [ ! -f "docker-compose.yml" ]; then
              echo "❌ docker-compose.yml not found on server!"
              exit 1
            fi

            # Логинимся в GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

            # Обновляем и запускаем docker compose
            echo "🔄 Pulling latest images for version ${{ env.version }}..."
            docker compose --env-file .env pull backend
            echo "🚀 Starting services..."
            docker compose --env-file .env up -d --remove-orphans
            echo "📊 Status:"
            docker compose ps

      - name: Notify Deployment Success
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ✅ *Deployment Successful*

            *Version*: `v${{ env.version }}`
            *Environment*: Production
            Application has been deployed successfully!

# ghcr.io/rvalien/glados:latest
# ghcr.io/rvalien/GladOs:latest
