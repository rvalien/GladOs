# deploy-prod.yml
name: Deploy to Production
on:
  push:
    branches:
      - release/prod
  workflow_dispatch:
    inputs:
      version:
        description: '–í–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: v14.03)'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: cd-prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Determine version to deploy
        id: get_version
        run: |
          # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: inputs -> repository variable -> latest
          if [ "${{ github.event.inputs.version }}" != "latest" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            VERSION="${{ github.event.inputs.version }}"
            echo "üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è –∏–∑ inputs: $VERSION"
          elif [ "${{ vars.CURRENT_RELEASE_VERSION }}" != "" ]; then
            VERSION="${{ vars.CURRENT_RELEASE_VERSION }}"
            echo "üì¶ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ—Ä—Å–∏—è –∏–∑ —Ä–µ–ª–∏–∑–∞: $VERSION"
          else
            VERSION="latest"
            echo "üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è latest –≤–µ—Ä—Å–∏—è"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "final_version=$VERSION" >> $GITHUB_ENV
      
      - name: Clear release version (if used)
        if: vars.CURRENT_RELEASE_VERSION != '' && github.event.inputs.version == ''
        run: |
          gh variable delete CURRENT_RELEASE_VERSION || echo "Variable already deleted or doesn't exist"
          echo "üßπ –û—á–∏—â–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–ª–∏–∑–∞ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Deploy Information
        run: |
          echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π!"
          echo "–í–µ—Ä—Å–∏—è: ${{ steps.get_version.outputs.version }}"
          echo "Trigger: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" = "push" ]; then
            echo "–ö–æ–º–º–∏—Ç: ${{ github.sha }}"
          fi
      
      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.PROD_APP_PATH }}
            git fetch --all --tags
            
            VERSION="${{ steps.get_version.outputs.version }}"
            
            if [ "$VERSION" != "latest" ]; then
              echo "üè∑Ô∏è Checking out tag: v$VERSION"
              if git checkout "v$VERSION"; then
                echo "‚úÖ Successfully checked out tag v$VERSION"
              else
                echo "‚ùå Failed to checkout tag v$VERSION, using latest"
                git pull origin release/prod
              fi
            else
              CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
              echo "üìã Current branch: $CURRENT_BRANCH"
              git pull origin $CURRENT_BRANCH
            fi
            
            echo "üê≥ Building Docker images..."
            docker compose build backend
            echo "üîÑ Starting services..."
            docker compose up -d
            echo "‚úÖ Deployment completed!"
            docker compose ps
      
      - name: Notify Success
        if: success()
        run: |
          echo "üéâ Deployment —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          echo "üìå –í–µ—Ä—Å–∏—è: ${{ steps.get_version.outputs.version }}"
          echo "üîó Commit: ${{ github.sha }}"
      
      - name: Show logs
        if: success()
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            docker logs glados-backend-1 --tail 50