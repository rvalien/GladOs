name: Deploy to Production

on:
  push:
    branches:
      - release/prod
  workflow_dispatch:
    inputs:
      version:
        description: '–í–µ—Ä—Å–∏—è –¥–ª—è –¥–µ–ø–ª–æ—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: v14.03)'
        required: false
        default: 'latest'

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: cd-prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download version artifact
        uses: actions/download-artifact@v4
        continue-on-error: true
        with:
          name: release-version
          path: .

      - name: Read version from artifact or inputs
        id: get_version
        run: |
          if [ -f version.txt ]; then
            VERSION=$(cat version.txt)
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Found version in artifact: $VERSION"
          elif [ "${{ github.event.inputs.version }}" != "latest" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
            echo "Using version from inputs: ${{ github.event.inputs.version }}"
          else
            echo "version=latest" >> $GITHUB_OUTPUT
            echo "Using latest version"
          fi

      - name: Deploy Information
        run: |
          echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π!"
          echo "–í–µ—Ä—Å–∏—è: ${{ steps.get_version.outputs.version }}"

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ${{ secrets.PROD_APP_PATH }}
            git fetch --all --tags
            
            VERSION="${{ steps.get_version.outputs.version }}"
            
            if [ "$VERSION" != "latest" ]; then
              echo "üè∑Ô∏è Checking out tag: v$VERSION"
              if git checkout "v$VERSION"; then
                echo "Successfully checked out tag v$VERSION"
              else
                echo "Failed to checkout tag v$VERSION, using latest"
                git pull origin release/prod
              fi
            else
              CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
              echo "üìã Current branch: $CURRENT_BRANCH"
              git pull origin $CURRENT_BRANCH
            fi
            
            echo "üê≥ Building Docker images..."
            docker compose build backend
            echo "üîÑ Starting services..."
            docker compose up -d
            echo "‚úÖ Deployment completed!"
            docker compose ps

      - name: Notify Success
        if: success()
        run: |
          echo "üéâ Deployment —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
          echo "–í–µ—Ä—Å–∏—è: ${{ steps.get_version.outputs.version }}"
          docker logs glados-backend-1