name: Deploy to Production
on:
  push:
    branches:
      - release/prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: cd-prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Extract version from commit message
        id: get_version
        run: |
          COMMIT_MSG="${{ github.event.head_commit.message }}"
          if [[ "$COMMIT_MSG" =~ \[RELEASE-v([0-9]+\.[0-9]+(\.[0-9]+)?)\] ]]; then
            VERSION="${BASH_REMATCH[1]}"
            echo "Найдена версия в commit: $VERSION"
          else
            VERSION="latest"
            echo "Используется latest"
          fi
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Create .env file locally
        run: |
          cat > .env << EOF
          RELEASE_VERSION=${{ env.version }}
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEATHER_TOKEN=${{ secrets.WEATHER_TOKEN }}
          ADMIN_IDS=${{ secrets.ADMIN_IDS }}
          EOF

      - name: Upload .env file to server
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: ".env"
          target: "${{ secrets.PROD_APP_PATH }}/"
          rm: true

      - name: Deploy to Production Server
        uses: appleboy/ssh-action@v1.2.2
        with:
          host: ${{ secrets.PROD_HOST }}
          username: ${{ secrets.PROD_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Проверяем, существует ли директория
            if [ ! -d "${{ secrets.PROD_APP_PATH }}" ]; then
              echo "Directory ${{ secrets.PROD_APP_PATH }} does not exist"
              exit 1
            fi

            cd ${{ secrets.PROD_APP_PATH }}

            # Проверяем, является ли директория git репозиторием
            if [ ! -d .git ]; then
              echo "Directory ${{ secrets.PROD_APP_PATH }} is not a git repository"
              # Клонируем репозиторий или инициализируем его
              git clone https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git . || {
                echo "Failed to clone repository"
                exit 1
              }
            else
              # Если это git репозиторий, обновляем его
              git fetch origin
              git reset --hard origin/release/prod
            fi

            # Убедимся, что мы на нужной ветке
            git checkout release/prod
            git pull origin release/prod

            # Проверяем наличие docker-compose.yml
            if [ ! -f "docker-compose.yml" ]; then
              echo "docker-compose.yml not found in ${{ secrets.PROD_APP_PATH }}"
              exit 1
            fi

            # Обновляем и запускаем docker compose
            docker compose --env-file .env pull backend
            docker compose --env-file .env up -d --remove-orphans

      - name: Notify Deployment Success
        uses: appleboy/telegram-action@v1.0.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          format: markdown
          message: |
            ✅ *Deployment Successful*

            *Version*: `v${{ env.version }}`
            *Environment*: Production
            Application has been deployed successfully!
