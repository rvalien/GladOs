name: CI tests

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Generate Docker cache key
      id: docker_cache
      run: |
        # Хэшируем Dockerfile и pyproject.toml (и poetry.lock если есть)
        FILES_TO_HASH="Dockerfile"

        # Проверяем наличие файлов и добавляем их к списку для хэширования
        if [ -f "pyproject.toml" ]; then
            FILES_TO_HASH="$FILES_TO_HASH pyproject.toml"
        fi
        if [ -f "poetry.lock" ]; then
            FILES_TO_HASH="$FILES_TO_HASH poetry.lock"
        fi

        # Вычисляем общий хэш для файлов зависимостей и Dockerfile
        TOTAL_HASH=$(echo $FILES_TO_HASH | xargs sha256sum | sha256sum | cut -d' ' -f1)

        # Также добавляем хэш от основных Python файлов (если они изменились - тоже пересобираем)
        PYTHON_FILES_HASH=$(find . -name "*.py" -not -path "./.*" -not -path "./venv/*" -not -path "./.venv/*" -not -path "./.git/*" -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1)

        CACHE_KEY="docker-image-${TOTAL_HASH}-${PYTHON_FILES_HASH}"
        echo "cache_key=${CACHE_KEY}" >> $GITHUB_OUTPUT
        echo "Cache key: ${CACHE_KEY}"

    - name: Cache Docker image
      uses: actions/cache@v4
      id: cache-docker
      with:
        path: /tmp/docker-image.tar
        key: ${{ steps.docker_cache.outputs.cache_key }}

    - name: Load cached Docker image
      if: steps.cache-docker.outputs.cache-hit == 'true'
      run: |
        if [ -f /tmp/docker-image.tar ]; then
            docker load -i /tmp/docker-image.tar
            echo "Loaded cached image"
        else
            echo "Cache file not found, building image"
        fi

    - name: Build Docker image
      if: steps.cache-docker.outputs.cache-hit != 'true'
      run: |
        docker build -t myapp:test .
        mkdir -p /tmp
        docker save myapp:test -o /tmp/docker-image.tar
        echo "Built and saved Docker image"

    - name: Run tests in container and copy coverage file
      run: |
        # Запускаем контейнер в фоне
        CONTAINER_ID=$(docker run -d \
          -v ${{ github.workspace }}:/workspace \
          -w /workspace \
          myapp:test \
          tail -f /dev/null)

        echo "Container ID: $CONTAINER_ID"

        # Выполняем тесты в контейнере
        if docker exec $CONTAINER_ID bash -c "
          coverage erase &&
          pytest --cov=. --cov-report=xml:/workspace/coverage.xml --cov-report=html:/workspace/htmlcov --cov-report=term
        "; then
          echo "Tests completed successfully"
          TEST_EXIT_CODE=0
        else
          echo "Tests failed"
          TEST_EXIT_CODE=1
        fi

        # Копируем все файлы coverage из контейнера (они могут иметь разные имена)
        docker exec $CONTAINER_ID bash -c "ls -la /workspace/.coverage*" 2>/dev/null || echo "No coverage files found in container"
        docker cp $CONTAINER_ID:/workspace/.coverage* . 2>/dev/null || echo "No coverage files to copy"

        # Также копируем coverage файлы, которые могут быть в корне
        docker cp $CONTAINER_ID:/workspace/.coverage* . 2>/dev/null || echo "Trying to copy from root"

        # Пытаемся найти и скопировать любой файл .coverage в контейнере
        COVERAGE_FILES=$(docker exec $CONTAINER_ID bash -c "find /workspace -name '.coverage*' 2>/dev/null || echo ''")
        if [ -n "$COVERAGE_FILES" ]; then
          echo "Found coverage files: $COVERAGE_FILES"
          for file in $COVERAGE_FILES; do
            filename=$(basename "$file")
            docker cp $CONTAINER_ID:"$file" "./$filename"
            echo "Copied $filename"
          done

          # Если есть несколько файлов .coverage, объединим их в один
          ls -la .coverage* 2>/dev/null
          COVERAGE_FILE_COUNT=$(ls -1 .coverage* 2>/dev/null | wc -l)
          if [ $COVERAGE_FILE_COUNT -gt 1 ]; then
            echo "Found multiple coverage files, combining them..."
            # Используем контейнер для объединения файлов
            docker cp .coverage* $CONTAINER_ID:/workspace/
            docker exec $CONTAINER_ID bash -c "
              coverage combine .coverage*
              mv .coverage /workspace/.coverage_combined
            "
            docker cp $CONTAINER_ID:/workspace/.coverage_combined ./.coverage
          elif [ $COVERAGE_FILE_COUNT -eq 1 ]; then
            # Переименовываем первый найденный файл в .coverage
            mv .coverage* .coverage
          fi
        else
          echo "No coverage files found in container"
        fi

        # Останавливаем контейнер
        docker stop $CONTAINER_ID
        docker rm $CONTAINER_ID

        # Выходим с кодом ошибки если тесты не прошли
        [ $TEST_EXIT_CODE -ne 0 ] && exit $TEST_EXIT_CODE

    - name: Verify coverage file
      run: |
        ls -la .coverage || echo "Coverage file not found!"
        test -f .coverage || echo "Warning: Coverage file not found!" || exit 0

    - name: Upload coverage data
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: .coverage_${{ github.run_id }}
        path: .coverage
        retention-days: 1
        if-no-files-found: ignore
        include-hidden-files: true

  coverage:
    name: Coverage Report
    runs-on: ubuntu-latest
    needs: test
    if: |
      needs.test.result == 'success' &&
      needs.test.conclusion == 'success'
    permissions:
      pull-requests: write
      contents: write
      actions: read

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Download coverage artifacts
      uses: actions/download-artifact@v5
      with:
        name: .coverage_${{ github.run_id }}

    - name: Coverage comment
      id: coverage_comment
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Store Pull Request comment to be posted
      uses: actions/upload-artifact@v4
      if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
      with:
        name: python-coverage-comment-action
        path: python-coverage-comment-action.txt
