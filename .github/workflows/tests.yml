name: CI tests

on:
  pull_request:
    branches:
      - master
    paths:
      - '**.py'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'setup.py'
      - 'tests/**'
  push:
    branches:
      - master
    paths:
      - '**.py'
      - 'Dockerfile'
      - 'pyproject.toml'
      - 'setup.py'
      - 'tests/**'
  workflow_dispatch:

jobs:
  tests:
    name: run tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          tags: pytest-app
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run tests with coverage
        run: |
          docker run --name pytest-container \
            pytest-app \
            pytest --cov=. --cov-report=xml --cov-report=term

      - name: Copy coverage files from container
        if: success()  # только если тесты прошли
        run: |
          mkdir -p ${{ github.workspace }}/coverage-data
          docker cp pytest-container:/app/coverage.xml ${{ github.workspace }}/coverage-data/
          docker cp pytest-container:/app/.coverage ${{ github.workspace }}/coverage-data/ 2>/dev/null || true

      - name: Cleanup container
        if: always()  # вот тут always нужен, чтобы удалить контейнер в любом случае
        run: docker rm pytest-container || true

      - name: Upload coverage artifact
        if: success()  # только если тесты прошли
        uses: actions/upload-artifact@v4
        with:
          name: coverage-data
          path: ${{ github.workspace }}/coverage-data/
          retention-days: 1

  coverage:
    name: tests coverage
    runs-on: ubuntu-latest
    needs: tests
    if: success()  # только если тесты прошли
    permissions:
      pull-requests: write
      contents: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Download coverage artifacts
        uses: actions/download-artifact@v5
        with:
          name: coverage-data
          path: ./coverage-data

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v4
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt
