name: CI tests

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-backend:
    name: build backend image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set REPO_NAME in lowercase
        run: |
          echo "REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Map source paths for coverage
        run: |
          sudo rm -rf /home/app
          sudo ln -s "$GITHUB_WORKSPACE" /home/app

      - name: Fix Docker Hub Issue
        run: docker logout

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build & push backend image
        run: |
          docker buildx build \
            --progress plain \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t ghcr.io/"${{ env.REPO_NAME }}":ci-${{ github.sha }} \
            --push \
            -f Dockerfile \
            .

          if [ -d /tmp/.buildx-cache-new ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

  tests:
    name: tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    environment: ci-tests
    needs: build-backend
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set REPO_NAME in lowercase
        run: |
          echo "REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Create .env for tests
        run: |
          cat > .env << EOF
          IMAGE=${{ env.REPO_NAME }}
          IMAGE_TAG=ci-${{ github.sha }}
          RELEASE_VERSION=${{ env.version }}
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEATHER_TOKEN=${{ secrets.WEATHER_TOKEN }}
          ADMIN_IDS=${{ secrets.ADMIN_IDS }}
          EOF

      - name: Pull backend image
        run: |
          docker pull ghcr.io/"${{ env.REPO_NAME }}":ci-${{ github.sha }}

      - name: Run tests with coverage
        env:
          CELERY_TASK_ALWAYS_EAGER: "true"
        run: |
          docker compose --env-file .env run --rm \
            -v ${{ github.workspace }}/app-coverage:/app/coverage \
            -e COVERAGE_FILE=/app/coverage/.coverage.all \
            backend pytest tests/ --cov=. --cov-report=term-missing --cov-report=xml:/app/coverage/coverage.xml

      - name: Debug - Check coverage files
        run: |
          echo "Checking coverage files in app-coverage:"
          ls -la app-coverage/ || echo "app-coverage directory doesn't exist"
          find app-coverage -type f

      - name: Collect coverage data
        run: |
          mkdir -p coverage-data/all
          # Проверяем, есть ли файлы в /app-coverage
          if [ -f "app-coverage/.coverage.all" ]; then
            cp app-coverage/.coverage.all coverage-data/all/
            echo "Coverage file found and copied"
          elif [ -f "app-coverage/coverage.xml" ]; then
            cp app-coverage/coverage.xml coverage-data/all/
            echo "Coverage XML file found and copied"
          else
            echo "Coverage files not found"
            ls -la app-coverage/ || echo "app-coverage directory doesn't exist"
          fi

      - name: Package coverage
        run: |
          touch coverage-data/all/.keep
          tar -czf coverage_all.tar.gz -C coverage-data/all .

      - name: Shutdown services
        if: always()
        run: docker compose --env-file .env down --volumes

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage_all
          path: coverage_all.tar.gz
          retention-days: 1
          include-hidden-files: true
