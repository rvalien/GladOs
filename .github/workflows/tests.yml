name: CI tests

on:
  pull_request:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'LICENSE'
  push:
    branches:
      - master
    paths-ignore:
      - '**/*.md'
      - '**/*.yml'
      - '**/*.yaml'
      - 'poetry.lock'
      - 'pyproject.toml'
      - 'LICENSE'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io

jobs:
  build-backend:
    name: build backend image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set REPO_NAME in lowercase
        run: |
          echo "REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Map source paths for coverage
        run: |
          sudo rm -rf /home/app
          sudo ln -s "$GITHUB_WORKSPACE" /home/app

      - name: Fix Docker Hub Issue
        run: docker logout

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build & push backend image
        run: |
          docker buildx build \
            --progress plain \
            --cache-from type=local,src=/tmp/.buildx-cache \
            --cache-to type=local,dest=/tmp/.buildx-cache-new,mode=max \
            -t ghcr.io/"${{ env.REPO_NAME }}":ci-${{ github.sha }} \
            --push \
            -f Dockerfile \
            .

          if [ -d /tmp/.buildx-cache-new ]; then
            rm -rf /tmp/.buildx-cache
            mv /tmp/.buildx-cache-new /tmp/.buildx-cache
          fi

  tests:
    name: tests
    timeout-minutes: 20
    runs-on: ubuntu-latest
    environment: ci-tests
    needs: build-backend
    permissions:
      contents: read
      packages: write
      pull-requests: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Set REPO_NAME in lowercase
        run: |
          echo "REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Login to GHCR
        run: echo "${{ github.token }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Create .env for tests
        run: |
          cat > .env << EOF
          IMAGE=${{ env.REPO_NAME }}
          IMAGE_TAG=ci-${{ github.sha }}
          TELEGRAM_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}
          WEATHER_TOKEN=${{ secrets.WEATHER_TOKEN }}
          ADMIN_IDS=${{ secrets.ADMIN_IDS }}
          EOF

      - name: Pull backend image
        run: |
          docker pull ghcr.io/"${{ env.REPO_NAME }}":ci-${{ github.sha }}

      - name: Run tests with coverage
        env:
          CELERY_TASK_ALWAYS_EAGER: "true"
        run: |
          mkdir -p coverage_output
          chmod 777 coverage_output
          docker compose --env-file .env run --rm --user root \
            -v $PWD/coverage_output:/coverage_output \
            backend bash -c "pytest tests/ --cov --cov-report=xml --cov-report=term && cp coverage.xml /coverage_output/ && chmod 644 /coverage_output/coverage.xml"

      - name: Move coverage file
        if: always()
        run: |
          if [ -f coverage_output/coverage.xml ]; then
            mv coverage_output/coverage.xml ./coverage.xml
          fi

      - name: Code Coverage Report
        if: github.event_name == 'pull_request'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          fail_below_min: false
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'

      - name: Add Coverage PR Comment
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Tag image as latest on master
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          docker tag ghcr.io/"${{ env.REPO_NAME }}":ci-${{ github.sha }} ghcr.io/"${{ env.REPO_NAME }}":latest
          docker push ghcr.io/"${{ env.REPO_NAME }}":latest
          echo "âœ… Image tagged as latest"
