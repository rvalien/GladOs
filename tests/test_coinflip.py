import pytest
from unittest.mock import patch
from aiogram import types


class TestCoinFlip:
    """–¢–µ—Å—Ç—ã –º–æ–¥—É–ª—è –º–æ–Ω–µ—Ç–∫–∏"""

    @pytest.mark.asyncio
    async def test_coin_flip_heads(self, message: types.Message):
        """–¢–µ—Å—Ç –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –û—Ä—ë–ª"""
        from utils.coinflip import coinflip_command

        with patch("random.randint", return_value=0):
            await coinflip_command(message)

            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]

            assert "üé≤ –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É..." in call_args
            assert "ü™ô –û—Ä—ë–ª" in call_args

    @pytest.mark.asyncio
    async def test_coin_flip_tails(self, message: types.Message):
        """–¢–µ—Å—Ç –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç–∫–∏ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –†–µ—à–∫–∞"""
        from utils.coinflip import coinflip_command

        with patch("random.randint", return_value=1):
            await coinflip_command(message)

            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]

            assert "üé≤ –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É..." in call_args
            assert "ü™ô –†–µ—à–∫–∞" in call_args

    @pytest.mark.asyncio
    async def test_coin_flip_random_distribution(self, message: types.Message):
        """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –±—Ä–æ—Å–∫–∞ –º–æ–Ω–µ—Ç–∫–∏"""
        from utils.coinflip import coinflip_command

        results = []

        with patch("random.randint") as mock_randint:
            mock_randint.return_value = 0
            await coinflip_command(message)
            call_args = message.reply.call_args[0][0]
            assert "ü™ô –û—Ä—ë–ª" in call_args
            results.append("heads")

            mock_randint.return_value = 1
            await coinflip_command(message)
            call_args = message.reply.call_args[0][0]
            assert "ü™ô –†–µ—à–∫–∞" in call_args
            results.append("tails")

        assert len(results) == 2
        assert "heads" in results
        assert "tails" in results

    @pytest.mark.asyncio
    async def test_coin_flip_message_format(self, message: types.Message):
        """–¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        from utils.coinflip import coinflip_command

        with patch("random.randint", return_value=0):
            await coinflip_command(message)

            message.reply.assert_called_once()
            call_args = message.reply.call_args[0][0]

            assert call_args.startswith("üé≤ –ë—Ä–æ—Å–∞–µ–º –º–æ–Ω–µ—Ç–∫—É...")
            assert "\n\n" in call_args
            assert "ü™ô –û—Ä—ë–ª" in call_args or "ü™ô –†–µ—à–∫–∞" in call_args
